package main

// Code generated by /var/folders/ts/5mp13p7d06z_6j0zk7yyk9s40000gn/T/go-build3646291285/b001/exe/peg example.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulestart
	ruleDocument
	ruleLine
	ruleSectionHeadLine
	ruleTextLine
	ruleEmptyLine
	ruleHeaderOpen
	ruleHeaderClose
	ruleSP
	ruleEOL
	ruleEOF
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
)

var rul3s = [...]string{
	"Unknown",
	"start",
	"Document",
	"Line",
	"SectionHeadLine",
	"TextLine",
	"EmptyLine",
	"HeaderOpen",
	"HeaderClose",
	"SP",
	"EOL",
	"EOF",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Document       *Document
	currentSection *Section

	Buffer string
	buffer []rune
	rules  [17]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			fmt.Println("Document")
			p.Document = &Document{
				Sections: []*Section{},
			}
			p.currentSection = nil

		case ruleAction1:

			fmt.Println("Section=" + text)
			p.currentSection = &Section{Name: text}
			p.Document.Sections = append(p.Document.Sections, p.currentSection)

		case ruleAction2:

			fmt.Println("Text=" + text)
			if p.currentSection != nil {
				p.currentSection.Body = p.currentSection.Body + text
			}

		case ruleAction3:

			fmt.Println("Empty")

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 start <- <(Action0 Document EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleAction0]() {
					goto l0
				}
				if !_rules[ruleDocument]() {
					goto l0
				}
				if !_rules[ruleEOF]() {
					goto l0
				}
				add(rulestart, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Document <- <Line*> */
		func() bool {
			{
				position3 := position
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if !_rules[ruleLine]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleDocument, position3)
			}
			return true
		},
		/* 2 Line <- <(SectionHeadLine / TextLine / EmptyLine)> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[ruleSectionHeadLine]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleTextLine]() {
						goto l10
					}
					goto l8
				l10:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleEmptyLine]() {
						goto l6
					}
				}
			l8:
				add(ruleLine, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 3 SectionHeadLine <- <(HeaderOpen <(!EOL !HeaderClose .)+> Action1 HeaderClose EOL)> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				if !_rules[ruleHeaderOpen]() {
					goto l11
				}
				{
					position13 := position
					{
						position16, tokenIndex16 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l16
						}
						goto l11
					l16:
						position, tokenIndex = position16, tokenIndex16
					}
					{
						position17, tokenIndex17 := position, tokenIndex
						if !_rules[ruleHeaderClose]() {
							goto l17
						}
						goto l11
					l17:
						position, tokenIndex = position17, tokenIndex17
					}
					if !matchDot() {
						goto l11
					}
				l14:
					{
						position15, tokenIndex15 := position, tokenIndex
						{
							position18, tokenIndex18 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l18
							}
							goto l15
						l18:
							position, tokenIndex = position18, tokenIndex18
						}
						{
							position19, tokenIndex19 := position, tokenIndex
							if !_rules[ruleHeaderClose]() {
								goto l19
							}
							goto l15
						l19:
							position, tokenIndex = position19, tokenIndex19
						}
						if !matchDot() {
							goto l15
						}
						goto l14
					l15:
						position, tokenIndex = position15, tokenIndex15
					}
					add(rulePegText, position13)
				}
				if !_rules[ruleAction1]() {
					goto l11
				}
				if !_rules[ruleHeaderClose]() {
					goto l11
				}
				if !_rules[ruleEOL]() {
					goto l11
				}
				add(ruleSectionHeadLine, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 4 TextLine <- <(!HeaderOpen <(!EOL .)+> Action2 EOL)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[ruleHeaderOpen]() {
						goto l22
					}
					goto l20
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
				{
					position23 := position
					{
						position26, tokenIndex26 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l26
						}
						goto l20
					l26:
						position, tokenIndex = position26, tokenIndex26
					}
					if !matchDot() {
						goto l20
					}
				l24:
					{
						position25, tokenIndex25 := position, tokenIndex
						{
							position27, tokenIndex27 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l27
							}
							goto l25
						l27:
							position, tokenIndex = position27, tokenIndex27
						}
						if !matchDot() {
							goto l25
						}
						goto l24
					l25:
						position, tokenIndex = position25, tokenIndex25
					}
					add(rulePegText, position23)
				}
				if !_rules[ruleAction2]() {
					goto l20
				}
				if !_rules[ruleEOL]() {
					goto l20
				}
				add(ruleTextLine, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 5 EmptyLine <- <(EOL Action3)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				if !_rules[ruleEOL]() {
					goto l28
				}
				if !_rules[ruleAction3]() {
					goto l28
				}
				add(ruleEmptyLine, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 6 HeaderOpen <- <'['> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				if buffer[position] != rune('[') {
					goto l30
				}
				position++
				add(ruleHeaderOpen, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 7 HeaderClose <- <']'> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				if buffer[position] != rune(']') {
					goto l32
				}
				position++
				add(ruleHeaderClose, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 8 SP <- <(' ' / '\t' / EOL)> */
		nil,
		/* 9 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				{
					position37, tokenIndex37 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l38
					}
					position++
					if buffer[position] != rune('\n') {
						goto l38
					}
					position++
					goto l37
				l38:
					position, tokenIndex = position37, tokenIndex37
					if buffer[position] != rune('\n') {
						goto l39
					}
					position++
					goto l37
				l39:
					position, tokenIndex = position37, tokenIndex37
					if buffer[position] != rune('\r') {
						goto l35
					}
					position++
				}
			l37:
				add(ruleEOL, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 10 EOF <- <!.> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				{
					position42, tokenIndex42 := position, tokenIndex
					if !matchDot() {
						goto l42
					}
					goto l40
				l42:
					position, tokenIndex = position42, tokenIndex42
				}
				add(ruleEOF, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 12 Action0 <- <{
		    fmt.Println("Document")
		    p.Document = &Document{
		        Sections: []*Section{},
		    }
		    p.currentSection = nil
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 14 Action1 <- <{
		    fmt.Println("Section=" + text)
		    p.currentSection = &Section{ Name: text }
		    p.Document.Sections = append(p.Document.Sections, p.currentSection)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 15 Action2 <- <{
		    fmt.Println("Text=" + text)
		    if p.currentSection != nil {
		        p.currentSection.Body = p.currentSection.Body + text
		    }
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 16 Action3 <- <{
		    fmt.Println("Empty")
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
